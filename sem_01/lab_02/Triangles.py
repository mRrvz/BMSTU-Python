'''

Задача: по заданым координатам трех точек определить длины сторон треугольнка.

Найти биссектрису, проведенную из наим. угла треугольника.

Определить, является ли треугольник прямоугольным.

По введеным координат четвертой точки определить, лежит ли она в треугольнике.

Если точка лежит в этом треугольнике, то найти расстояние от этой точки
до ближайшей стороны или ее продолжения.

Проверить существование треугольника.

'''

# Обозначение переменных:

# x1 - координата X точки A.
# x2 - координата X точки B.
# x3 - координата X точки C.
# x4 - координата X точки Z.
# y1 - координата Y точки A.
# y2 - координата Y точки B.
# y3 - координата Y точки C.
# y4 - координата Y точки Z.
# x_diff21 - разница между коорд. X точки B и точки А.
# x_diff31 - разница между коорд. X точки C и точки А.
# x_diff32 - разница между коорд. X точки C и точки B.
# x_diff23 - разница между коорд. X точки B и точки C.
# x_diff13 - разница между коорд. X точки A и точки C.
# y_diff21 - разница между коорд. Y точки B и точки А.
# y_diff31 - разница между коорд. Y точки C и точки А.
# y_diff32 - разница между коорд. Y точки C и точки B.
# y_diff23 - разница между коорд. Y точки B и точки C.
# y_diff13 - разница между коорд. Y точки A и точки C.
# len1 - длина стороны AB.
# len2 - длина стороны AC.
# len3 - длина стороны BC.
# MinSide - сторона с минимальной длинной.
# LargeSide - сторона с наибольшой длинной.
# Side1 - первая сторона с не наименьшей (либо с не наибольшой) длинной.
# Side2 - вторая сторона с не наименьшей (либо с не наибольшой) длинной.
# Bisectrix = биссектриса, проведенная из наим. угла треугольника.
# Expression1 - выражение, опред. с какой стороны от стороны AB лежит т. Z.
# Expression2 - выражение, опред. с какой стороны от стороны BC лежит т. Z.
# Expression3 - выражение, опред. с какой стороны от стороны AC лежит т. Z.
# Expression4 - выражение, опред. принадлежит ли т. Z стороне AB.
# Expression5 - выражение, опред. принадлежит ли т. Z стороне BC.
# Expression6 - выражение, опред. принадлежит ли т. Z стороне AC.
# Distance1 - расстояние точки Z до стороны AB.
# Distance2 - расстояние точки Z до стороны BC.
# Eistance3 - расстояние точки Z до стороны AC.
# MinDistance - расстояние от точки Z до ближайшей стороны треугольника.

'''

Тестовые примеры:

1) Прямоугольный треугольник.
При вводе A (1, 1), B (1, 7) и С (6, 1), программа должна выводить:
1.  Треугольник существует
2.1 Длина AB = 6.0000
2.2 Длина BC = 7.8102
2.3 Длина AC = 5.0000
3.  Биссектриса из наим. угла: 6.3811
4.  Треугольник прямоугольный.
    При вводе четвертой точки Z (2, 2):
5.1 Точка Z лежит внутри треугольника.
5.2 Расстояние от т. Z до ближ. стороны: 1.0000

2) Равнобедренный треугольник.
При вводе A (2, 2), B (5, 7) и С (8, 2), программа должна выводить:
1.  Треугольник существует
2.1 Длина AB = 5.8310
2.2 Длина BC = 5.8310
2.3 Длина AC = 6.0000
3.  Биссектриса из наим. угла: 5.1466
4.  Треугольник не прямоугольный.
    При вводе четвертой точки Z (3, 3):
5.1 Точка Z лежит внутри треугольника.
5.2 Расстояние от т. Z до ближ. стороны: 0.3430

3) Произвольный треугольник.
При вводе A (-2, -1), B (-5, -2) и С (-1, -2), программа должна выводить:
1.  Треугольник существует.
2.1 Длина AB = 3.1623
2.2 Длина BC = 4.0000
2.3 Длина AC = 1.4142
3.  Биссектриса из наим. угла: 3.4865
4.  Треугольник не прямоугольный
    При вводе четвертой точки Z (2, 2):
5.1 Точка Z не лежит в треугольнике.

4) Три точки, лежащие на одной прямой.
При вводе A (0, 0), B (5, 5) и C (10, 10), программа должна выводить:
1. Треугольник не существует.

5) Три точки с одинаковыми X и Y координатами.
При вводе A (2, 2), B (2, 2) и C (2, 2), программа должна выводить:
1. Треугольник не существует.

'''

from math import sqrt

# Ввод координат X и Y точек A, B и С:

x1, y1 = map(int, input('Введите координаты X и Y точки A: ').split())
x2, y2 = map(int, input('Введите координаты X и Y точки B: ').split())
x3, y3 = map(int, input('Введите координаты X и Y точки C: ').split())
print()

# Вычисление всех возможных разниц между координатами X и Y точек A, B и C:

x_diff21 = x2 - x1
x_diff31 = x3 - x1
x_diff32 = x3 - x2
x_diff23 = x2 - x3
x_diff13 = x1 - x3
y_diff21 = y2 - y1
y_diff31 = y3 - y1
y_diff32 = y3 - y2
y_diff23 = y2 - y3
y_diff13 = y1 - y3

# Вычисление длин сторон треугольника:

len1 = sqrt(x_diff21 * x_diff21 + y_diff21 * y_diff21)
len2 = sqrt(x_diff31 * x_diff31 + y_diff31 * y_diff31)
len3 = sqrt(x_diff32 * x_diff32 + y_diff32 * y_diff32)

# Проверка существования треугольника:

if 0.5 * (x_diff13 * y_diff23 - x_diff23 * y_diff13) != 0:
    print('Треугольник ABC существует.')
else:
    print('Треугольник ABC не существует.')
    exit()

print()
print('Длина стороны AB: {:4.3f}'.format(len1))
print('Длина стороны BC: {:4.3f}'.format(len3))
print('Длина стороны AС: {:4.3f}'.format(len2))
print()

# Поиск наименьшей стороны треугольника:

MinSide = len1
Side1 = len2
Side2 = len3
if MinSide > len2:
    MinSide = len2
    Side1 = len1
    Side2 = len3
if MinSide > len3:
    MinSide = len3
    Side1 = len1
    Side2 = len2

# Вычисление биссектрисы, проведенной из наименьшего угла треугольника:

Bisectrix = (sqrt (Side1 * Side2 * (Side1 + Side2 + MinSide) \
                   * (Side1 + Side2 - MinSide)) ) / (Side1 + Side2)

print('Биссектриса, проведенная из наименьшего угла: {:4.3f}'.format(Bisectrix))
print()

# Поиск наибольшой стороны треугольника:

LargeSide = len1
Side1 = len2
Side2 = len3
if LargeSide < len2:
    LargeSide = len2
    Side1 = len1
    Side2 = len3
if LargeSide < len3:
    LargeSide = len3
    Side1 = len1
    Side2 = len2

# Проверка, прямоуголен ли треугольник:

if LargeSide == sqrt(Side1 * Side1  + Side2 * Side2):
    print('Треугольник ABC прямоугольный.')
else:
    print('Треугольник ABC не прямоугольный.')

# Ввод координат X и Y точки Z:

print()
x4, y4 = map(int, input('Введите координаты X и Y точки Z: ').split())
print()

# Подсчет, с какой стороны от сторон AB, BC и AC лежит точка Z:

Expression1 = (x1 - x4) * (y2 - y1) - (x2 - x1) * (y1 - x4)
Expression2 = (x2 - x4) * (y3 - y2) - (x3 - x2) * (y2 - x4)
Expression3 = (x3 - x4) * (y1 - y3) - (x1 - x3) * (y3 - x4)
Expression4 = (x4 - x1) * (y2 - y1) - (x2 - x1) * (y4 - y1)
Expression5 = (x4 - x1) * (y3 - y2) - (x3 - x2) * (y4 - y2) 
Expression6 = (x4 - x1) * (y3 - y1) - (x3 - x1) * (y4 - y3) 

# Проверка принадлежности точки треугольнику:

if (Expression1 <= 0 and Expression2 <= 0 and Expression3 <= 0) \
        or (Expression1 >= 0 and Expression2 >= 0 and Expression3 >= 0) \
        or  Expression4 == 0 or Expression5 == 0 or Expression6 == 0:
    print('Точка Z лежит внутри треугольника ABC.')
    print()

    # Вычисление расст. от т. Z до 3-х сторон треугольника, вывод наименьшего:

    Distance1 = abs((y_diff21) * x4 - (x_diff21) * y4 + x2 * y1 - y2 * x1) \
                / len1
    Distance2 = abs((y_diff31) * x4 - (x_diff31) * y4 + x3 * y1 - y3 * x1) \
                / len2
    Distance3 = abs((y_diff32) * x4 - (x_diff32) * y4 + x3 * y2 - y3 * x2) \
                / len3

    MinDistance = Distance1
    if MinDistance > Distance2:
        MinDistance = Distance2
    if MinDistance > Distance3:
        MinDistance = Distance3
    print('Расстояние от т. Z до ближайшей стороны {:4.3f}'.format(MinDistance))
else:
    print('Точка Z не лежит внутри треугольника ABC.')



