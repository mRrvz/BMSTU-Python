'''

Задача: при заданном x, ε и макс. кол-ве членов n,
найти сумму ряда ((x+1) ^ n) / (n * 2 ^ n)

'''

'''

Обозначение переменных:

x - знач. х
Epsilon - 
NMax - макс. член n
t - текущее знач. члена ряда
y - сумма ряда
n - текущий номер члена ряда
nPrint - номера члена ряда при котором выводится таблица.

'''

'''

Тестовые примеры:
1) При x = -0.6, ε = 8.e-15, NMax = 60, начального n = 2 и шаге 2,
 программа должна выдавать: 
┏━━━━━━━━━┳━━━━━━━━━━━━━━━┓
┃    n    ┃ Текущая сумма ┃
┣━━━━━━━━━╋━━━━━━━━━━━━━━━┫
┃       2 ┃        0.2200 ┃
┃       4 ┃        0.2231 ┃
┃       6 ┃        0.2231 ┃
┃       8 ┃        0.2231 ┃
┃      10 ┃        0.2231 ┃
┃      12 ┃        0.2231 ┃
┃      14 ┃        0.2231 ┃
┃      16 ┃        0.2231 ┃
┃      18 ┃        0.2231 ┃
┗━━━━━━━━━┻━━━━━━━━━━━━━━━┛

Ряд сошелся за 19 шагов.
Сумма ряда равна = 0.2231436

2) При x = -0.6, ε = 0.e-15, NMax = 480, начального n = 2 и шаге 20,
 программа должна выдавать: 
┏━━━━━━━━━┳━━━━━━━━━━━━━━━┓
┃    n    ┃ Текущая сумма ┃
┣━━━━━━━━━╋━━━━━━━━━━━━━━━┫
┃       2 ┃        0.2200 ┃
┗━━━━━━━━━┻━━━━━━━━━━━━━━━┛

Ряд сошелся за 20 шагов.
Сумма ряда равна = 0.2231436

3) При x = 0.6 ε = 1.e-15, NMax = 100, начального n = 2 и шаге 10,
 программа должна выдавать:
┏━━━━━━━━━┳━━━━━━━━━━━━━━━┓
┃    n    ┃ Текущая сумма ┃
┣━━━━━━━━━╋━━━━━━━━━━━━━━━┫
┃       2 ┃         1.120 ┃
┃      12 ┃         1.592 ┃
┃      22 ┃         1.608 ┃
┃      32 ┃         1.609 ┃
┃      42 ┃         1.609 ┃
┃      52 ┃         1.609 ┃
┃      62 ┃         1.609 ┃
┃      72 ┃         1.609 ┃
┃      82 ┃         1.609 ┃
┃      92 ┃         1.609 ┃
┗━━━━━━━━━┻━━━━━━━━━━━━━━━┛

Ряд не сошелся за 100 шагов.

'''

# Ввод Epsilon, x и макс. число шагов

Epsilon = False
while Epsilon <= 0 or NMax <= 1:
    x, Epsilon, NMax = map(float, input('Введите значения x, ε, и \
максимальное число шагов: ').split())
    if Epsilon <= 0 and NMax <= 1:
        print('\nε должен быть строго больше нуля, а максимальное \
        число шагов более еденицы')
        print()
    elif Epsilon <= 0:
        print('\nε должен быть строго больше нуля.')
        print()
    elif NMax <= 1:
        print('\nМаксимальное числого шагов должно быть больше еденицы.')
        print()

print()

# Ввод nPrint и шага

nPrint = False
while nPrint <= 0 or step <= 0:
    nPrint, step = map(int,input('Введите значение n, с которого \
будет выводиться текущая сумма ряда и шаг вывода значений: ').split())
    if nPrint <= 0 and step <= 0:
        print('\Значение n и шаг должны быть больше нуля')
        print()
    elif nPrint <= 0:
        print('\nЗначение n должно быть больше нуля.')
        print()
    elif step <= 0:
        print('\nШаг вывода должен быть больше нуля.')
        print()

# Подсчет первого члена суммы:
        
y = 0
t = (x+1) / 2
n = 0
print('┏━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n'
      '┃    n    ┃ Текущая сумма ┃\n'
      '┣━━━━━━━━━╋━━━━━━━━━━━━━━━┫')

while abs(t) > Epsilon:
    n += 1
    if n  > NMax:
        break
    t = ((x + 1) ** n) / (n * (2 ** n))
    y += t
    if n == nPrint:
        if round(y) == 0:
            print('┃{:8d} ┃ {:13.4f} ┃'.format(n, y))
        else:
            print('┃{:8d} ┃ {:13.3f} ┃'.format(n, y))
        nPrint += step
print('┗━━━━━━━━━┻━━━━━━━━━━━━━━━┛\n')

# Вывод суммы

if n > NMax:
    print('Ряд не сошелся за', n-1, 'шагов.')
else:
    if round(y) == 0:
        print('Ряд сошелся за {:1d} шагов.\nСумма ряда равна = {:0.7f}'.\
              format(n, y))
    else:
        print('Ряд сошелся за {:1d} шагов.\nСумма ряда равна = {:0.6f}'.\
              format(n, y))


